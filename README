This library implements two learning-based TCP congestion control algorithms as outlined in "Improving TCP Congestion Control with Machine Intelligence" by authors Yiming Kong, Hui Zang, and Xiaoli Ma. The first, LP-TCP uses a Random Forests classifiers to adjust cwnd with packet loss predictions. The second, RL-TCP, uses reinforcement learning to select the best cwnd adjustment according to Q-values and rewards. 

I've implemented all code included in the library from scratch. The files in this repository were tested and validated on two MacOS systems running Sonoma 14.0 and Ventura 13.2.1 using Python 3.11. Ensure Python and pip are available.

1. Navigate to the ML_CC repository
2. pip install -r requirements.txt
3. mkdir datasets && mkdir dataframes && mkdir models && mkdir objects
4. Adjust RUNTIME in helper.py to set the number of seconds to run each simulation
5. ./test.sh

test.sh             script to run all files in order - aimd, newreno, lp, and rl
                    NOTE: to adjust the time each simulation runs for, change RUNTIME in helper.py
                    NOTE: this script will rewrite the files in datasets, dataframes, models, and objects ensure that any important files are renamed or moved to a different folder

helper.py           shared, fixed variables, functions, and the packet class
server.py           server which responds to packets with acknowledgements

gen_dataframes.py   used to process a csv file and generate a binary object containing its dataframe
                    takes a command line input, version 0 or 1 (AIMD or NewReno)
                    outputs a binary file, aimd.pkl or newreno.pkl, in the dataframes repository

gen_models.py       used to generate a binary object containing a random forests model for LP-TCP
                    takes a command line input, version 0 or 1 (AIMD or NewReno)
                    outputs a binary file, aimd.pkl or newreno.pkl , in the models repository

gen_ranges.py       used to generate a binary object containing ranges for variables required by RL-TCP
                    takes a command line input, version 0 or 1 (AIMD or NewReno)
                    outputs a binary file, aimd.pkl or newreno.pkl, in the objects repository

aimd.py             client for Additive-Increase, Multiplicative-Decrease (AIMD) congestion control
                    outputs a csv dataset, aimd.csv, in the datasets repository

newreno.py          client for NewReno congestion control
                    outputs a csv dataset titled newreno.csv in the datasets repository

lp.py               client for LP-TCP as outlined in the paper
                    takes a command line input, version 0 or 1 (AIMD or NewReno)
                    outputs a csv dataset, lp-aimd.csv (version 0) or lp-newreno.csv (version 1), in the datasets repository

rl.py               client for RL-TCP as outlined in the paper 
                    takes a command line input, version 0 or 1 (AIMD or NewReno)
                    outputs a csv dataset, rl-aimd.csv or rl-newreno.csv, in the datasets repository